# Generated by Django 5.1.7 on 2025-06-04 13:12

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('dilemma_game', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Tournament',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True)),
                ('rounds_per_match', models.IntegerField(default=200)),
                ('repetitions', models.IntegerField(default=5)),
                ('status', models.CharField(choices=[('CREATED', 'Created'), ('IN_PROGRESS', 'In Progress'), ('COMPLETED', 'Completed')], default='CREATED', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('payoff_matrix_json', models.TextField(default='{"CC":[3,3],"CD":[0,5],"DC":[5,0],"DD":[0,0]}')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='TournamentParticipant',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('total_score', models.FloatField(default=0)),
                ('average_score', models.FloatField(default=0)),
                ('rank', models.IntegerField(blank=True, null=True)),
                ('strategy', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='dilemma_game.strategy')),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='participants', to='dilemma_game.tournament')),
            ],
            options={
                'unique_together': {('tournament', 'strategy')},
            },
        ),
        migrations.CreateModel(
            name='TournamentMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('repetition', models.IntegerField()),
                ('player1_score', models.FloatField(default=0)),
                ('player2_score', models.FloatField(default=0)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('COMPLETED', 'Completed')], default='PENDING', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('tournament', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches', to='dilemma_game.tournament')),
                ('participant1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_player1', to='dilemma_game.tournamentparticipant')),
                ('participant2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='matches_as_player2', to='dilemma_game.tournamentparticipant')),
            ],
            options={
                'unique_together': {('tournament', 'participant1', 'participant2', 'repetition')},
            },
        ),
    ]
